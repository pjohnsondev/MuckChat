Currently just a mere prototype proposal. Can be abandoned for a different way to handle things. Feedback needed.
The "Character" class is abstract. Both the "Player" and "NPC" class extend the Character class, and can be instantiated.

Use the "NPCFactory" to create new NPCs that don't yet exist. Use the NPC class to instantiate NPCs that do already
exist, using their identifier as the argument to the constructor.

Intended example usage -

Create a new NPC:
    NPC someNewNpc = NPCFactory.createNewNPC();
    
Instantiate an existing player or NPC based upon its identifying ID in the backend storage:
    NPC someRetrievedNpc = new NPC("villager1");
    Player somePlayer = new Player("my_username");
    
Instantiate an existing player, and access some of its stats:
    Player somePlayer = new Player("my_username");
    int health = somePlayer.getHealth();
    
== Collaboration Needed ==  :
    - Player username/password creation, handled via Issue #11?
    - Character stats, handled via Issue #14?
    - Avatars, collab needed with Issue #7
    
    - Backend storage. Which team is doing this?
    - World map. Character needs to be positioned somewhere. Which team is handling a world map?
    
== Open Questions == :
    - How is Character movement handled, particularly player movement? Should movement controllers be implemented for both
      Player & NPC? How will these interact with JavaFX frontend and backend storage?
    - Should this entire implementation be scrapped, and something else done instead? This is just a prototype to get
      some ideas rolling. 